# Strict-Transport-Security (HSTS): Erzwingt die Verwendung von HTTPS.
# `max-age=31536000` bedeutet, dass für 1 Jahr (in Sekunden) alle Verbindungen zu dieser Domain nur über HTTPS hergestellt werden.
# `includeSubDomains` bedeutet, dass HSTS auch für alle Subdomains gilt.
# `preload` bedeutet, dass die Domain auf der [HSTS Preload-Liste](https://hstspreload.org/) eingetragen wird, was bedeutet, dass Browser die Domain direkt als HTTPS behandeln, ohne die HTTP-Version zu versuchen.
# Wenn du die `preload`-Option verwendest, achte darauf, dass deine Seite wirklich immer HTTPS verwendet, da diese Einstellung **nicht rückgängig gemacht werden kann**, sobald du in die Preload-Liste aufgenommen wurdest.
add_header Strict-Transport-Security 'max-age=31536000; includeSubDomains; preload' always;

# Content-Security-Policy (CSP): Definiert, von welchen Quellen dein Browser Inhalte laden darf, um Angriffe wie Cross-Site Scripting (XSS) zu verhindern.
# `default-src 'self'`: Nur Inhalte von der eigenen Domain dürfen geladen werden.
# `font-src *`: Fonts können von beliebigen Quellen geladen werden.
# `img-src * data:`: Bilder können von beliebigen Quellen und auch als `data:` URLs (Base64 kodierte Daten) geladen werden.
# `script-src *`: Skripte können von beliebigen Quellen geladen werden (achte darauf, dies sicher zu definieren, um XSS zu verhindern).
# `style-src *`: Styles können von beliebigen Quellen geladen werden.
# **Wichtig**: Diese Einstellung erlaubt viele unsichere Quellen (z.B. `*` für `script-src`). Besser wäre es, nur vertrauenswürdige Quellen zu definieren.
add_header Content-Security-Policy "default-src 'self'; font-src *;img-src * data:; script-src *; style-src *" always;

# X-XSS-Protection: Aktiviert den eingebauten Schutz gegen Cross-Site-Scripting (XSS) in modernen Browsern.
# `1; mode=block` bedeutet, dass der Browser die Ausführung von schädlichem Skript blockiert, wenn er ein XSS-Versuch entdeckt.
# Beachte: Moderne Browser wie Chrome haben diesen Schutz deaktiviert, da er viele falsche Positives verursacht hat.
add_header X-XSS-Protection "1; mode=block" always;

# X-Frame-Options: Verhindert, dass die Seite in einem <frame>, <iframe>, <object> oder <embed> eingebettet wird.
# `SAMEORIGIN` bedeutet, dass die Seite nur von derselben Domain aus in einem Frame eingebettet werden darf. Dies schützt vor Clickjacking.
add_header X-Frame-Options "SAMEORIGIN" always;

# X-Content-Type-Options: Verhindert, dass der Browser den MIME-Typ einer Datei basierend auf deren Inhalt errät (Sniffing).
# `nosniff` bedeutet, dass der Browser keine Dateitypen erraten darf und nur den angegebenen MIME-Typ verwenden darf.
# Dies verhindert potenzielle Sicherheitslücken, bei denen der Browser eine Datei als einen anderen Typ behandelt.
add_header X-Content-Type-Options nosniff always;

# Referrer-Policy: Bestimmt, wie der Referrer-Header bei HTTP-Anfragen übermittelt wird.
# `strict-origin` bedeutet, dass der Referrer nur über HTTPS und mit der gleichen Herkunft (Origin) übermittelt wird. Dies schützt die Privatsphäre der Benutzer, da weniger Daten preisgegeben werden.
add_header Referrer-Policy "strict-origin" always;

# Permissions-Policy: Ermöglicht es, verschiedene browserseitige Funktionen wie Geolocation, Mikrofon oder Kamera zu steuern.
# In diesem Beispiel ist der Zugriff auf Geolocation, MIDI, Mikrofon und andere APIs vollständig deaktiviert.
# Der Zugriff auf die Kamera und das Mikrofon ist nur für die eigene Domain (`self`) erlaubt, ebenso wie die Möglichkeit, den Fullscreen-Modus zu aktivieren.
# Dies erhöht die Privatsphäre der Benutzer, indem unnötige Berechtigungen deaktiviert werden.
add_header Permissions-Policy "geolocation=(),midi=(),sync-xhr=(),microphone=(),camera=(),magnetometer=(),gyroscope=(),fullscreen=(self),payment=()" always;
